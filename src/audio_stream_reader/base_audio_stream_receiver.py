import pyaudio
import wave
import numpy as np
import time
from audio_stream_reader.istream_callback import IStreamCallback
from pathlib import Path
from collections import deque


class BaseAudioStreamReceiver:
    def __init__(self, device_name: str = "Stereo Mix (Realtek(R) Audio)"):
        self._callback = None
        self._is_recording = False
        self._sample_rate = 16000
        self._chunk_size = 480
        self._device_name = device_name
        self._input_device_index = self._get_device_index_by_name(self._device_name)

        # –î–ª—è RMS-–∞–Ω–∞–ª–∏–∑–∞
        self._frames = []
        self._rms_history = deque(maxlen=50)  # 50 —Ñ—Ä–µ–π–º–æ–≤ –ø–æ ~30-40 –º—Å ‚âà 1.5‚Äì2 —Å–µ–∫—É–Ω–¥—ã
        self._silence_frame_count = 0
        self._silence_threshold_factor = 0.5  # —Ç–∏—à–∏–Ω–∞ ‚Äî –µ—Å–ª–∏ RMS < —Å—Ä–µ–¥–Ω–µ–µ * 0.5
        self._silence_required = 13  # —Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥ "—Ç–∏—Ö–∏—Ö" —Ñ—Ä–µ–π–º–æ–≤ ‚Äî —Å—á–∏—Ç–∞—Ç—å —Ç–∏—à–∏–Ω–æ–π

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self._min_duration_seconds = 3
        self._max_duration_seconds = 8

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
        self._last_save_time = None

        # –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        self.project_root = Path(__file__).parent.parent
        self.result_dir = self.project_root / "result"
        self.result_dir.mkdir(parents=True, exist_ok=True)
        self.output_path = self.result_dir / "data.txt"

        with open(self.output_path, 'a', encoding='utf-8') as f:
            f.write("=== –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ ===\n")

    def _get_device_index_by_name(self, target_name: str):
        p = pyaudio.PyAudio()
        for i in range(p.get_device_count()):
            info = p.get_device_info_by_index(i)
            name = info.get('name')
            if target_name.lower() in name.lower() and info.get('maxInputChannels', 0) > 0:
                print(f"üéß –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: [{i}] {name}")
                return i
        p.terminate()
        raise ValueError(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ '{target_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    def list_input_devices(self):
        p = pyaudio.PyAudio()
        print("üé§ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        for i in range(p.get_device_count()):
            info = p.get_device_info_by_index(i)
            if info.get('maxInputChannels', 0) > 0:
                print(f"[{i}] {info['name']}")
        p.terminate()

    def set_audio_stream_listener(self, callback: IStreamCallback):
        if not isinstance(callback, IStreamCallback):
            raise TypeError("Callback –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å IStreamCallback")
        self._callback = callback
        self._start_recording()

    def _start_recording(self):
        self._is_recording = True
        self._audio = pyaudio.PyAudio()
        self._stream = self._audio.open(
            format=pyaudio.paInt16,
            channels=1,
            rate=self._sample_rate,
            input=True,
            input_device_index=self._input_device_index,
            frames_per_buffer=self._chunk_size,
            stream_callback=self._audio_callback
        )

    def stop_audio_stream_receiving(self):
        self._is_recording = False
        if hasattr(self, '_stream'):
            self._stream.stop_stream()
            self._stream.close()
        if hasattr(self, '_audio'):
            self._audio.terminate()

        with open(self.output_path, 'a', encoding='utf-8') as f:
            f.write("=== –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===\n")

    def _audio_callback(self, in_data, frame_count, time_info, status):
        if self._is_recording:
            self._frames.append(in_data)
            self._process_audio_buffer(in_data)
        return (in_data, pyaudio.paContinue)

    def _process_audio_buffer(self, in_data):
        audio_array = np.frombuffer(in_data, dtype=np.int16)
        rms = np.sqrt(np.mean(audio_array.astype(np.float32) ** 2))
        self._rms_history.append(rms)

        avg_rms = np.mean(self._rms_history) if self._rms_history else 1
        silence_threshold = avg_rms * self._silence_threshold_factor

        if rms < silence_threshold:
            self._silence_frame_count += 1
        else:
            self._silence_frame_count = 0

        # –ï—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if self._silence_frame_count >= self._silence_required:
            # print(f"üìâ –¢–∏—Ö–æ (RMS {rms:.2f} < –ø–æ—Ä–æ–≥–∞ {silence_threshold:.2f}), –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è")
            self._save_frames_to_wav()
            # –ú–∞—Å—Å–∏–≤ —Ñ—Ä–µ–π–º–æ–≤ –æ—á–∏—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if self._last_save_time is None or (time.time() - self._last_save_time) >= self._min_duration_seconds:
                self._frames.clear()  # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self._silence_frame_count = 0
            self._rms_history.clear()

        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –º–∞–∫—Å–∏–º—É–º—É
        max_buffer_seconds = 15
        max_frames = int(self._sample_rate * max_buffer_seconds / self._chunk_size)
        if len(self._frames) > max_frames:
            self._frames = self._frames[-max_frames:]

    def _save_frames_to_wav(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        num_frames = len(self._frames)
        duration_seconds = num_frames * self._chunk_size / self._sample_rate

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 3 —Å–µ–∫—É–Ω–¥ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if duration_seconds < self._min_duration_seconds:
            if self._last_save_time is None or (time.time() - self._last_save_time) < self._min_duration_seconds:
                # print(f"‚è≥ –ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è ({duration_seconds:.2f} —Å–µ–∫), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–∏—Å—å

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ‚Äî –æ–±—Ä–µ–∑–∞–µ–º
        if duration_seconds > self._max_duration_seconds:
            # print(f"‚è≥ –ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({duration_seconds:.2f} —Å–µ–∫), –æ–±—Ä–µ–∑–∞–µ–º")
            self._frames = self._frames[:int(self._sample_rate * self._max_duration_seconds / self._chunk_size)]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = int(time.time() * 1000)
        filename = f"rec_{timestamp}.wav"
        full_path = self.result_dir / filename
        wav_data = b''.join(self._frames)

        with wave.open(str(full_path), 'wb') as wf:
            wf.setnchannels(1)
            wf.setsampwidth(2)
            wf.setframerate(self._sample_rate)
            wf.writeframes(wav_data)

        with open(self.output_path, 'a', encoding='utf-8') as f:
            f.write(f"{time.ctime()} | {filename} | {len(wav_data)} –±–∞–π—Ç\n")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
        self._last_save_time = time.time()

        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ—Ä–µ–π–º–æ–≤
        self._frames.clear()

        if self._callback:
            self._callback.do_on_audio_stream_playing(str(full_path))
